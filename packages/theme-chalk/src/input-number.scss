@use 'sass:map';
@use 'sass:math';
@use 'mixins/mixins.scss' as *;
@use 'common/var.scss' as *;
@include b(input-number) {
    width: map.get($input-number-width, 'default');
    position: relative;
    display: inline-flex;

    .#{$namespace}-input {
        &__wrapper {
            padding-left: #{map.get($input-height, 'default') + 10};
            padding-right: #{map.get($input-height, 'default') + 10};
        }
        &__inner {
            text-align: center;
            &::-webkit-inner-spin-button,
            ::-webkit-outer-spin-button {
                -webkit-appearance: none;
            }
        }
    }


    @include e((increase, decrease)) {
        position: absolute;
        top: 1px;
        bottom: 1px;
        width: map.get($input-height, 'default');
        cursor: pointer;
        box-sizing: border-box;
        font-size: 13px;

        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1;

        background: getCssVar('fill-color', 'light');
        color: getCssVar('text-color', 'regular');
        &:hover {
            color: getCssVar('color-primary');
            & ~ .#{$namespace}-input:not(.is-disabled) .#{$namespace}-input__wrapper {
                box-shadow: 0 0 0 1px map.get($input, 'focus-border-color') inset;
            }
        }
        &.is-disabled {
            cursor: not-allowed;
            color: getCssVar('disabled-text-color');
        }
    }
    @include e(increase) {
        right: 1px;
        border-radius: 0 getCssVar('border-radius-base') getCssVar('border-radius-base') 0;
        border-left: getCssVar('border');
    }
    @include e(decrease) {
        left: 1px;
        border-radius: getCssVar('border-radius-base') 0 0 getCssVar('border-radius-base');
        border-right: getCssVar('border');
    }

    @include when(disabled) {
        @include e((increase, decrease)) {
            color: getCssVar('disabled-border-color');
            border-color: getCssVar('disabled-border-color');
            &:hover {
                color: getCssVar('disabled-border-color');
                cursor: not-allowed;
            }
        }
    }

    @each $size in (large,small) {
        @include m($size) {
            width: map.get($input-number-width, $size);
            @include e((increase, decrease)) {
                width: map.get($input-height, $size);
                font-size: map.get($input-font-size, $size);
            }
            .#{$namespace}-input--#{$size} {
                .#{$namespace}-input__wrapper {
                    padding-left: #{map.get($input-height, $size) + 10};
                    padding-right: #{map.get($input-height, $size) + 10};
                }
            }
        }
    }

    @include when(controls-right) {
        .#{$namespace}-input__wrapper {
            padding-left: 15px;
            padding-right: #{map.get($input-height, 'default') + 10};

        }
        @include e((increase, decrease)) {
            @include set-css-var-value(
                ('input', 'number-controls-height'),
                math.div(map.get($input-height, 'default') - 2, 2)
            );
            height: getCssVar('input-number-controls-height');
            [class*='#{$namespace}-icon'] {
                transform: scale(0.8);
            }
        }
        @include e(increase) {
            bottom: auto;
            left: auto;
            border-bottom: getCssVar('border');
            border-radius: 0 getCssVar('border-radius-base') 0 0;
        }
        @include e(decrease) {
            right: 1px;
            left: auto;
            top: auto;
            border-right: none;
            border-left: getCssVar('border');
            border-radius: 0 0 getCssVar('border-radius-base') 0;
        }
    }
}
