@use 'mixins/mixins.scss' as *;
@use 'sass:map';
@use 'common/var.scss' as *;
@use 'mixins/var' as *;

@mixin mixed-input-border($color) {
    box-shadow: 0 0 0 1px $color inset;
}

@mixin inset-prepend-border($color) {
    box-shadow: 1px 0 0 0 $color inset, 0 1px 0 0 $color inset, 0 -1px 0 0 $color inset;
}

@mixin inset-append-border($color) {
    box-shadow: -1px 0 0 0 $color inset, 0 1px 0 0 $color inset, 0 -1px 0 0 $color inset;
}


@include b(textarea) {
    @include set-component-css-var('input', $input)
}
@include b(textarea) {
    width: 100%;
    font-size: getCssVar('font-size', 'base');
    @include e(inner) {
        width: 100%;
        font-size: inherit;
        line-height: 1.5;
        color: map.get($input, 'text-color');
        border-radius: map.get($input, 'border-radius');
        @include mixed-input-border(map.get($input, 'border-color'));
        border: none;
        box-sizing: border-box;
        resize: vertical;
        padding: 5px map.get($input-padding-horizontal, 'default');
        &:hover {
            @include mixed-input-border(map.get($input, 'hover-border-color'));
        }
        &:focus {
            outline: none;
            @include mixed-input-border(map.get($input, 'focus-border-color'));
        }
    }
}

@include b(input) {
    @include set-component-css-var('input', $input)
}

@include b(input) {
    display: inline-flex;
    width: getCssVar('input-width');
    font-size: getCssVar('font-size', 'base');
    @include e(wrapper) {
        display: inline-flex;
        flex-grow: 1;
        @include mixed-input-border(map.get($input, 'border-color'));
        padding: $border-width map.get($input-padding-horizontal, 'default');
        border-radius: map.get($input, 'border-radius');
        &:hover {
            @include mixed-input-border(map.get($input, 'hover-border-color'));
        }
        @include when(focus) {
            @include mixed-input-border(map.get($input, 'focus-border-color'));
        }
        
    }
    @include e(inner) {
        @include set-css-var-value(
            'input-inner-height',
            calc(
                map.get($input-height, 'default') - $border-width * 2
            )
        );
        font-size: inherit;
        flex-grow: 1;
        outline: none;
        border: none;
        width: 100%;
        height: getCssVar('input-inner-height');
        line-height: getCssVar('input-inner-height');
        padding: 0;
        color: map.get($input, 'text-color');
        &::placeholder {
            color: #a8abb2;
        }
    }
    @each $slot in (suffix, prefix) {
        @include e($slot) {
            display: inline-flex;
            color: map.get($input, 'icon-color');
            @include e(#{$slot}-inner) {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                @if $slot == suffix {
                    > :first-child {
                        margin-left: 8px;
                    }
                } @else {
                    > :last-child {
                        margin-right: 8px;
                    }
                    > :first-child {
                        &,
                        &.#{$namespace}-input__icon {
                            margin-left: 0px;
                        }
                    }
                }
                
            }
        }
    }
    & .#{$namespace}-input__icon {
        margin-left: 8px;
    }
    & .#{$namespace}-input__clear,
    & .#{$namespace}-input__password {
        cursor: pointer;
        color: getCssVar('input-icon-color');
        font-size: map.get($input-font-size, 'default');
        &:hover {
            color: getCssVar('input-clear-hover-color');
        }
    }

    @include when(disabled) {
        cursor: not-allowed;
        .#{$namespace}-input__wrapper {
            background-color: map.get($input-disabled, 'fill');
            @include mixed-input-border(map.get($input-disabled, 'border'));
        }
        .#{$namespace}-input__inner {
            cursor: not-allowed;
            color: map.get($input-disabled, 'text-color');
            &::placeholder {
                color: map.get($input-disabled, 'placeholder-color');
            }
        }
    }

    @each $size in (large, small) {
        @include m($size) {
            font-size: map.get($input-font-size, $size);
            @include e(wrapper) {
                padding: $border-width map.get($input-padding-horizontal, $size);
            }
            @include  e(inner) {
                @include set-css-var-value(
                    'input-inner-height',
                    calc(
                        map.get($input-height, $size) - $border-width * 2
                    )
                );
            }
        }
    }
}

@include b(input-group) {
    display: inline-flex;
    width: 100%;
    @include e((prepend, append)) {
        background-color: getCssVar('fill-color', 'light');
        color: getCssVar('color-info');
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0 20px;
        border-radius: getCssVar('input-border-radius');
        .#{$namespace}-button,.#{$namespace}-select{
            display: inline-block;
            margin: 0 -20px;
        }
        .#{$namespace}-button,.#{$namespace}-select .#{$namespace}-select__wrapper {
            border-color: transparent;
            background-color: transparent;
            color: inherit;
        }

    }
    @include e(prepend) {
        @include inset-prepend-border(#{getCssVar('input-border-color')});
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }
    @include m(prepend) {
        > .#{$namespace}-input__wrapper {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
        @include e(prepend) {
            .#{$namespace}-select {
                .#{$namespace}-select__wrapper {
                    border-top-right-radius: 0;
                    border-bottom-right-radius: 0;
                    @include inset-prepend-border(#{getCssVar('input-border-color')})
                }
            }
        }
    }

    @include e(append) {
        @include inset-append-border(#{getCssVar('input-border-color')});
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }
    @include m(append) {
        > .#{$namespace}-input__wrapper {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
        @include e(append) {
            .#{$namespace}-select {
                .#{$namespace}-select__wrapper {
                    border-top-left-radius: 0;
                    border-bottom-left-radius: 0;
                    @include inset-append-border(#{getCssVar('input-border-color')})
                }
            }
        }
    }
}
