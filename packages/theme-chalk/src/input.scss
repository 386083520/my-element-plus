@use 'mixins/mixins.scss' as *;
@use 'sass:map';
@use 'common/var.scss' as *;
@use 'mixins/var' as *;

@mixin mixed-input-border($color) {
    box-shadow: 0 0 0 1px $color inset;
}

@include b(input) {
    @include e(wrapper) {
        @include mixed-input-border(map.get($input, 'border-color'));
        padding: $border-width map.get($input-padding-horizontal, 'default');
        border-radius: map.get($input, 'border-radius');
        &:hover {
            @include mixed-input-border(map.get($input, 'hover-border-color'));
        }
        @include when(focus) {
            @include mixed-input-border(map.get($input, 'focus-border-color'));
        }
        @include e(inner) {
            @include set-css-var-value(
                'input-inner-height',
                calc(
                    map.get($input-height, 'default') - $border-width * 2
                )
            );
            outline: none;
            border: none;
            width: 100%;
            height: getCssVar('input-inner-height');
            line-height: getCssVar('input-inner-height');
            padding: 0;
            &::placeholder {
                color: #a8abb2;
            }
        }
    }
    @include when(disabled) {
        cursor: not-allowed;
        .#{$namespace}-input__wrapper {
            background-color: map.get($input-disabled, 'fill');
            @include mixed-input-border(map.get($input-disabled, 'border'));
        }
        .#{$namespace}-input__inner {
            cursor: not-allowed;
            color: map.get($input-disabled, 'text-color');
            &::placeholder {
                color: map.get($input-disabled, 'placeholder-color');
            }
        }
    }
}
